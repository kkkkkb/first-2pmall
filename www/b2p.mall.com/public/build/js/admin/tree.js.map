{"version":3,"sources":["tree.js"],"names":[],"mappingsfile":"tree.js","sourcesContent":["/*\r\n * Fuel UX Tree\r\n * https://github.com/ExactTarget/fuelux\r\n *\r\n * Copyright (c) 2014 ExactTarget\r\n * Licensed under the BSD New license.\r\n */\r\n\r\n// -- BEGIN UMD WRAPPER PREFACE --\r\n\r\n// For more information on UMD visit:\r\n// https://github.com/umdjs/umd/blob/master/jqueryPlugin.js\r\n\r\n(function (factory) {\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\t// if AMD loader is available, register as an anonymous module.\r\n\t\tdefine(['jquery'], factory);\r\n\t} else if (typeof exports === 'object') {\r\n\t\t// Node/CommonJS\r\n\t\tmodule.exports = factory(require('jquery'));\r\n\t} else {\r\n\t\t// OR use browser globals if AMD is not present\r\n\t\tfactory(jQuery);\r\n\t}\r\n}(function ($) {\r\n\t// -- END UMD WRAPPER PREFACE --\r\n\r\n\t// -- BEGIN MODULE CODE HERE --\r\n\r\n\tvar old = $.fn.tree;\r\n\r\n\t// TREE CONSTRUCTOR AND PROTOTYPE\r\n\r\n\tvar Tree = function Tree(element, options) {\r\n\t\tthis.$element = $(element);\r\n\t\tthis.options = $.extend({}, $.fn.tree.defaults, options);\r\n\r\n\t\tif (this.options.itemSelect) {\r\n\t\t\tthis.$element.on('click.fu.tree', '.tree-item', $.proxy(function (ev) {\r\n\t\t\t\tthis.selectItem(ev.currentTarget);\r\n\t\t\t}, this));\r\n\t\t}\r\n\r\n\t\t//ACE\r\n\t\tthis.$element.on('click.fu.tree', '.tree-branch-header', $.proxy(function (ev) {\r\n\t\t\tif (!this.options.folderSelect) this.toggleFolder(ev.currentTarget);\r\n\t\t\t\r\n\t\t}, this));\r\n\r\n\t\tthis.$element.on('click.fu.tree', '.tree-overflow', $.proxy(function (ev){\r\n\t\t\tthis.populate($(ev.currentTarget));\r\n\t\t}, this));\r\n\t\t\r\n\t\t\r\n\r\n\t\t// folderSelect default is true\r\n\t\tif (this.options.folderSelect) {\r\n\t\t\tthis.$element.addClass('tree-folder-select');\r\n\t\t\tthis.$element.off('click.fu.tree', '.tree-branch-name');\r\n\t\t\tthis.$element.on('click.fu.tree', '.icon-caret', $.proxy(function (ev) {\r\n\t\t\t\tthis.toggleFolder($(ev.currentTarget).next());//ACE\r\n\t\t\t}, this));\r\n\t\t\tthis.$element.on('click.fu.tree', '.tree-branch-header', $.proxy(function (ev) {\r\n\t\t\t\tthis.selectFolder($(ev.currentTarget));\r\n\t\t\t}, this));\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\t};\r\n\r\n\tTree.prototype = {\r\n\t\tconstructor: Tree,\r\n\r\n\t\tdeselectAll: function deselectAll(nodes) {\r\n\t\t\t// clear all child tree nodes and style as deselected\r\n\t\t\tnodes = nodes || this.$element;\r\n\t\t\tvar $selectedElements = $(nodes).find('.tree-selected');\r\n\t\t\tvar that = this;//ACE\r\n\t\t\t$selectedElements.each(function (index, element) {\r\n\t\t\t\t//styleNodeDeselected( $(element), $(element).find( '.glyphicon' ) );\r\n\t\t\t\tstyleNodeDeselected( that, $(element), $(element).find('.'+$.trim(that.options['base-icon']).replace(/(\\s+)/g, '.')) );//ACE\r\n\t\t\t});\r\n\t\t\treturn $selectedElements;\r\n\t\t},\r\n\r\n\t\tdestroy: function destroy() {\r\n\t\t\t// any external bindings [none]\r\n\t\t\t// empty elements to return to original markup\r\n\t\t\tthis.$element.find(\"li:not([data-template])\").remove();\r\n\r\n\t\t\tthis.$element.remove();\r\n\t\t\t// returns string of markup\r\n\t\t\treturn this.$element[0].outerHTML;\r\n\t\t},\r\n\r\n\t\trender: function render() {\r\n\t\t\tthis.populate(this.$element);\r\n\t\t},\r\n\r\n\t\tpopulate: function populate($el, isBackgroundProcess) {\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t// populate was initiated based on clicking overflow link\r\n\t\t\tvar isOverflow = $el.hasClass('tree-overflow');\r\n\r\n\t\t\tvar $parent = ($el.hasClass('tree')) ? $el : $el.parent();\r\n\t\t\tvar atRoot = $parent.hasClass('tree');\r\n\r\n\t\t\tif(isOverflow && !atRoot){\r\n\t\t\t\t$parent = $parent.parent();\r\n\t\t\t}\r\n\r\n\t\t\tvar treeData = $parent.data();\r\n\t\t\t// expose overflow data to datasource so it can be responded to appropriately.\r\n\t\t\tif(isOverflow){\r\n\t\t\t\ttreeData.overflow = $el.data();\r\n\t\t\t}\r\n\r\n\t\t\tisBackgroundProcess = isBackgroundProcess || false;\t// no user affordance needed (ex.- \"loading\")\r\n\r\n\t\t\tif(isOverflow){\r\n\t\t\t\tif(atRoot){\r\n\t\t\t\t\t// the loader at the root level needs to continually replace the overflow trigger\r\n\t\t\t\t\t// otherwise, when loader is shown below, it will be the loader for the last folder\r\n\t\t\t\t\t// in the tree, instead of the loader at the root level.\r\n\t\t\t\t\t$el.replaceWith($parent.find('> .tree-loader').remove());\r\n\t\t\t\t}else{\r\n\t\t\t\t\t$el.remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar $loader = $parent.find('.tree-loader:last');\r\n\r\n\t\t\tif (isBackgroundProcess === false) {\r\n\t\t\t\t$loader.removeClass('hide hidden'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.options.dataSource(treeData ? treeData : {}, function (items) {\r\n\t\t\t\t$.each(items.data, function (index, value) {\r\n\t\t\t\t\tvar $entity;\r\n\r\n\t\t\t\t\tif (value.type === 'folder') {\r\n\t\t\t\t\t\t$entity = self.$element.find('[data-template=treebranch]:eq(0)').clone().removeClass('hide hidden').removeData('template').removeAttr('data-template'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\r\n\t\t\t\t\t\t$entity.data(value);\r\n\t\t\t\t\t\t$entity.find('.tree-branch-name > .tree-label').html(value.text || value.name);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//ACE\r\n\t\t\t\t\t\tvar header = $entity.find('.tree-branch-header');\r\n\r\n\t\t\t\t\t\tif('icon-class' in value)\r\n\t\t\t\t\t\t\theader.find('i').addClass(value['icon-class']);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif('additionalParameters' in value\r\n\t\t\t\t\t\t\t&& 'item-selected' in value.additionalParameters \r\n\t\t\t\t\t\t\t\t&& value.additionalParameters['item-selected'] == true) {\r\n\t\t\t\t\t\t\t\tsetTimeout(function(){header.trigger('click')}, 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (value.type === 'item') {\r\n\t\t\t\t\t\t$entity = self.$element.find('[data-template=treeitem]:eq(0)').clone().removeClass('hide hidden').removeData('template').removeAttr('data-template'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\r\n\t\t\t\t\t\t$entity.find('.tree-item-name > .tree-label').html(value.text || value.name);\r\n\t\t\t\t\t\t$entity.data(value);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//ACE\r\n\t\t\t\t\t\tif('additionalParameters' in value\r\n\t\t\t\t\t\t\t&& 'item-selected' in value.additionalParameters \r\n\t\t\t\t\t\t\t\t&& value.additionalParameters['item-selected'] == true) {\r\n\t\t\t\t\t\t\t\t$entity.addClass ('tree-selected');\r\n\t\t\t\t\t\t\t\t$entity.find('i').removeClass(self.options['unselected-icon']).addClass(self.options['selected-icon']);\r\n\t\t\t\t\t\t\t\t//$entity.closest('.tree-folder-content').show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (value.type === 'overflow') {\r\n\t\t\t\t\t\t$entity = self.$element.find('[data-template=treeoverflow]:eq(0)').clone().removeClass('hide hidden').removeData('template').removeAttr('data-template'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\r\n\t\t\t\t\t\t$entity.find('.tree-overflow-name > .tree-label').html(value.text || value.name);\r\n\t\t\t\t\t\t$entity.data(value);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Decorate $entity with data or other attributes making the\r\n\t\t\t\t\t// element easily accessable with libraries like jQuery.\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// Values are contained within the object returned\r\n\t\t\t\t\t// for folders and items as attr:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// {\r\n\t\t\t\t\t//     text: \"An Item\",\r\n\t\t\t\t\t//     type: 'item',\r\n\t\t\t\t\t//     attr = {\r\n\t\t\t\t\t//         'classes': 'required-item red-text',\r\n\t\t\t\t\t//         'data-parent': parentId,\r\n\t\t\t\t\t//         'guid': guid,\r\n\t\t\t\t\t//         'id': guid\r\n\t\t\t\t\t//     }\r\n\t\t\t\t\t// };\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// the \"name\" attribute is also supported but is deprecated for \"text\".\r\n\r\n\t\t\t\t\t// add attributes to tree-branch or tree-item\r\n\t\t\t\t\tvar attr = value.attr || value.dataAttributes || [];\r\n\t\t\t\t\t$.each(attr, function (key, value) {\r\n\t\t\t\t\t\tswitch (key) {\r\n\t\t\t\t\t\t\tcase 'cssClass':\r\n\t\t\t\t\t\t\tcase 'class':\r\n\t\t\t\t\t\t\tcase 'className':\r\n\t\t\t\t\t\t\t\t$entity.addClass(value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t// allow custom icons\r\n\t\t\t\t\t\t\tcase 'data-icon':\r\n\t\t\t\t\t\t\t\t$entity.find('.icon-item').removeClass().addClass('icon-item ' + value);\r\n\t\t\t\t\t\t\t\t$entity.attr(key, value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t// ARIA support\r\n\t\t\t\t\t\t\tcase 'id':\r\n\t\t\t\t\t\t\t\t$entity.attr(key, value);\r\n\t\t\t\t\t\t\t\t$entity.attr('aria-labelledby', value + '-label');\r\n\t\t\t\t\t\t\t\t$entity.find('.tree-branch-name > .tree-label').attr('id', value + '-label');\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t// style, data-*\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t$entity.attr(key, value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// add child node\r\n\t\t\t\t\tif (atRoot) {\r\n\t\t\t\t\t\t$parent.append($entity);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$parent.find('.tree-branch-children:eq(0)').append($entity);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$parent.find('.tree-loader').addClass('hidden');\r\n\r\n\t\t\t\t// return newly populated folder\r\n\t\t\t\tself.$element.trigger('loaded.fu.tree', $parent);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tselectTreeNode: function selectItem(clickedElement, nodeType) {\r\n\t\t\tvar clicked = {};\t// object for clicked element\r\n\t\t\tclicked.$element = $(clickedElement);\r\n\r\n\t\t\tvar selected = {}; // object for selected elements\r\n\t\t\tselected.$elements = this.$element.find('.tree-selected');\r\n\t\t\tselected.dataForEvent = [];\r\n\r\n\t\t\t// determine clicked element and it's icon\r\n\t\t\tif (nodeType === 'folder') {\r\n\t\t\t\t// make the clicked.$element the container branch\r\n\t\t\t\tclicked.$element = clicked.$element.closest('.tree-branch');\r\n\t\t\t\tclicked.$icon = clicked.$element.find('.icon-folder');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclicked.$icon = clicked.$element.find('.icon-item');\r\n\t\t\t}\r\n\t\t\tclicked.elementData = clicked.$element.data();\r\n\r\n\t\t\t// the below functions pass objects by copy/reference and use modified object in this function\r\n\t\t\tif ( this.options.multiSelect ) {\r\n\t\t\t\tmultiSelectSyncNodes(this, clicked, selected);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsingleSelectSyncNodes(this, clicked, selected);\r\n\t\t\t}\r\n\r\n\t\t\t// all done with the DOM, now fire events\r\n\t\t\tthis.$element.trigger(selected.eventType + '.fu.tree', {\r\n\t\t\t\ttarget: clicked.elementData,\r\n\t\t\t\tselected: selected.dataForEvent\r\n\t\t\t});\r\n\r\n\t\t\tclicked.$element.trigger('updated.fu.tree', {\r\n\t\t\t\tselected: selected.dataForEvent,\r\n\t\t\t\titem: clicked.$element,\r\n\t\t\t\teventType: selected.eventType\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tdiscloseFolder: function discloseFolder(el) {\r\n\t\t\tvar $el = $(el);\r\n\r\n\t\t\tvar $branch = $el.closest('.tree-branch');\r\n\t\t\tvar $treeFolderContent = $branch.find('.tree-branch-children');\r\n\t\t\tvar $treeFolderContentFirstChild = $treeFolderContent.eq(0);\r\n\r\n\t\t\t//take care of the styles\r\n\t\t\t$branch.addClass('tree-open');\r\n\t\t\t$branch.attr('aria-expanded', 'true');\r\n\t\t\t$treeFolderContentFirstChild.removeClass('hide hidden'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\r\n\t\t\t$branch.find('> .tree-branch-header .icon-folder').eq(0)\r\n\t\t\t\t//.removeClass('glyphicon-folder-close')\r\n\t\t\t\t//.addClass('glyphicon-folder-open');\r\n\t\t\t\t.removeClass(this.options['close-icon']).addClass(this.options['open-icon']);//ACE\r\n\t\t\t\t\r\n\t\t\t$branch.find('> .icon-caret').eq(0)\r\n\t\t\t\t.removeClass(this.options['folder-open-icon']).addClass(this.options['folder-close-icon']);//ACE\r\n\r\n\t\t\t//add the children to the folder\r\n\t\t\tif (!$treeFolderContent.children().length) {\r\n\t\t\t\tthis.populate($treeFolderContent);\r\n\t\t\t}\r\n\r\n\t\t\tthis.$element.trigger('disclosedFolder.fu.tree', $branch.data());\r\n\t\t},\r\n\r\n\t\tcloseFolder: function closeFolder(el) {\r\n\t\t\tvar $el = $(el);\r\n\t\t\tvar $branch = $el.closest('.tree-branch');\r\n\t\t\tvar $treeFolderContent = $branch.find('.tree-branch-children');\r\n\t\t\tvar $treeFolderContentFirstChild = $treeFolderContent.eq(0);\r\n\r\n\t\t\t//take care of the styles\r\n\t\t\t$branch.removeClass('tree-open');\r\n\t\t\t$branch.attr('aria-expanded', 'false');\r\n\t\t\t$treeFolderContentFirstChild.addClass('hidden');\r\n\t\t\t$branch.find('> .tree-branch-header .icon-folder').eq(0)\r\n\t\t\t\t//.removeClass('glyphicon-folder-open')\r\n\t\t\t\t//.addClass('glyphicon-folder-close');\r\n\t\t\t\t.removeClass(this.options['open-icon']).addClass(this.options['close-icon']);//ACE\r\n\t\t\t\t\r\n\t\t\t$branch.find('> .icon-caret').eq(0)\r\n\t\t\t\t.removeClass(this.options['folder-close-icon']).addClass(this.options['folder-open-icon']);//ACE\r\n\r\n\t\t\t// remove chidren if no cache\r\n\t\t\tif (!this.options.cacheItems) {\r\n\t\t\t\t$treeFolderContentFirstChild.empty();\r\n\t\t\t}\r\n\r\n\t\t\tthis.$element.trigger('closed.fu.tree', $branch.data());\r\n\t\t},\r\n\r\n\t\ttoggleFolder: function toggleFolder(el) {\r\n\t\t\tvar $el = $(el);\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\tif ($el.find('.glyphicon-folder-close').length) {\r\n\t\t\t\tthis.discloseFolder(el);\r\n\t\t\t} else if ($el.find('.glyphicon-folder-open').length) {\r\n\t\t\t\tthis.closeFolder(el);\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif ($el.find('.'+$.trim(this.options['close-icon']).replace(/(\\s+)/g, '.')).length) {//ACE\r\n\t\t\t\tthis.discloseFolder(el);\r\n\t\t\t} else if($el.find('.'+$.trim(this.options['open-icon']).replace(/(\\s+)/g, '.')).length) {//ACE\r\n\t\t\t\tthis.closeFolder(el);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectFolder: function selectFolder(el) {\r\n\t\t\tif (this.options.folderSelect) {\r\n\t\t\t\tthis.selectTreeNode(el, 'folder');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectItem: function selectItem(el) {\r\n\t\t\tif (this.options.itemSelect) {\r\n\t\t\t\tthis.selectTreeNode(el, 'item');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectedItems: function selectedItems() {\r\n\t\t\tvar $sel = this.$element.find('.tree-selected');\r\n\t\t\tvar data = [];\r\n\r\n\t\t\t$.each($sel, function (index, value) {\r\n\t\t\t\tdata.push($(value).data());\r\n\t\t\t});\r\n\t\t\treturn data;\r\n\t\t},\r\n\r\n\t\t// collapses open folders\r\n\t\tcollapse: function collapse() {\r\n\t\t\tvar self = this;\r\n\t\t\tvar reportedClosed = [];\r\n\r\n\t\t\tvar closedReported = function closedReported(event, closed) {\r\n\t\t\t\treportedClosed.push(closed);\r\n\r\n\t\t\t\t// jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\r\n\t\t\t\tif (self.$element.find(\".tree-branch.tree-open:not('.hidden, .hide')\").length === 0) {\r\n\t\t\t\t\tself.$element.trigger('closedAll.fu.tree', {\r\n\t\t\t\t\t\ttree: self.$element,\r\n\t\t\t\t\t\treportedClosed: reportedClosed\r\n\t\t\t\t\t});\r\n\t\t\t\t\tself.$element.off('loaded.fu.tree', self.$element, closedReported);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t//trigger callback when all folders have reported closed\r\n\t\t\tself.$element.on('closed.fu.tree', closedReported);\r\n\r\n\t\t\tself.$element.find(\".tree-branch.tree-open:not('.hidden, .hide')\").each(function () {\r\n\t\t\t\tself.closeFolder(this);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t//disclose visible will only disclose visible tree folders\r\n\t\tdiscloseVisible: function discloseVisible() {\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar $openableFolders = self.$element.find(\".tree-branch:not('.tree-open, .hidden, .hide')\");\r\n\t\t\tvar reportedOpened = [];\r\n\r\n\t\t\tvar openReported = function openReported(event, opened) {\r\n\t\t\t\treportedOpened.push(opened);\r\n\r\n\t\t\t\tif (reportedOpened.length === $openableFolders.length) {\r\n\t\t\t\t\tself.$element.trigger('disclosedVisible.fu.tree', {\r\n\t\t\t\t\t\ttree: self.$element,\r\n\t\t\t\t\t\treportedOpened: reportedOpened\r\n\t\t\t\t\t});\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t* Unbind the `openReported` event. `discloseAll` may be running and we want to reset this\r\n\t\t\t\t\t* method for the next iteration.\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tself.$element.off('loaded.fu.tree', self.$element, openReported);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t//trigger callback when all folders have reported opened\r\n\t\t\tself.$element.on('loaded.fu.tree', openReported);\r\n\r\n\t\t\t// open all visible folders\r\n\t\t\tself.$element.find(\".tree-branch:not('.tree-open, .hidden, .hide')\").each(function triggerOpen() {\r\n\t\t\t\tself.discloseFolder($(this).find('.tree-branch-header'));\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t* Disclose all will keep listening for `loaded.fu.tree` and if `$(tree-el).data('ignore-disclosures-limit')`\r\n\t\t* is `true` (defaults to `true`) it will attempt to disclose any new closed folders than were\r\n\t\t* loaded in during the last disclosure.\r\n\t\t*/\r\n\t\tdiscloseAll: function discloseAll() {\r\n\t\t\tvar self = this;\r\n\r\n\t\t\t//first time\r\n\t\t\tif (typeof self.$element.data('disclosures') === 'undefined') {\r\n\t\t\t\tself.$element.data('disclosures', 0);\r\n\t\t\t}\r\n\r\n\t\t\tvar isExceededLimit = (self.options.disclosuresUpperLimit >= 1 && self.$element.data('disclosures') >= self.options.disclosuresUpperLimit);\r\n\t\t\tvar isAllDisclosed = self.$element.find(\".tree-branch:not('.tree-open, .hidden, .hide')\").length === 0;\r\n\r\n\r\n\t\t\tif (!isAllDisclosed) {\r\n\t\t\t\tif (isExceededLimit) {\r\n\t\t\t\t\tself.$element.trigger('exceededDisclosuresLimit.fu.tree', {\r\n\t\t\t\t\t\ttree: self.$element,\r\n\t\t\t\t\t\tdisclosures: self.$element.data('disclosures')\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t* If you've exceeded the limit, the loop will be killed unless you\r\n\t\t\t\t\t* explicitly ignore the limit and start the loop again:\r\n\t\t\t\t\t*\r\n\t\t\t\t\t*    $tree.one('exceededDisclosuresLimit.fu.tree', function () {\r\n\t\t\t\t\t*        $tree.data('ignore-disclosures-limit', true);\r\n\t\t\t\t\t*        $tree.tree('discloseAll');\r\n\t\t\t\t\t*    });\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tif (!self.$element.data('ignore-disclosures-limit')) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tself.$element.data('disclosures', self.$element.data('disclosures') + 1);\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t* A new branch that is closed might be loaded in, make sure those get handled too.\r\n\t\t\t\t* This attachment needs to occur before calling `discloseVisible` to make sure that\r\n\t\t\t\t* if the execution of `discloseVisible` happens _super fast_ (as it does in our QUnit tests\r\n\t\t\t\t* this will still be called. However, make sure this only gets called _once_, because\r\n\t\t\t\t* otherwise, every single time we go through this loop, _another_ event will be bound\r\n\t\t\t\t* and then when the trigger happens, this will fire N times, where N equals the number\r\n\t\t\t\t* of recursive `discloseAll` executions (instead of just one)\r\n\t\t\t\t*/\r\n\t\t\t\tself.$element.one('disclosedVisible.fu.tree', function () {\r\n\t\t\t\t\tself.discloseAll();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t* If the page is very fast, calling this first will cause `disclosedVisible.fu.tree` to not\r\n\t\t\t\t* be bound in time to be called, so, we need to call this last so that the things bound\r\n\t\t\t\t* and triggered above can have time to take place before the next execution of the\r\n\t\t\t\t* `discloseAll` method.\r\n\t\t\t\t*/\r\n\t\t\t\tself.discloseVisible();\r\n\t\t\t} else {\r\n\t\t\t\tself.$element.trigger('disclosedAll.fu.tree', {\r\n\t\t\t\t\ttree: self.$element,\r\n\t\t\t\t\tdisclosures: self.$element.data('disclosures')\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//if `cacheItems` is false, and they call closeAll, the data is trashed and therefore\r\n\t\t\t\t//disclosures needs to accurately reflect that\r\n\t\t\t\tif (!self.options.cacheItems) {\r\n\t\t\t\t\tself.$element.one('closeAll.fu.tree', function () {\r\n\t\t\t\t\t\tself.$element.data('disclosures', 0);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// This refreshes the children of a folder. Please destroy and re-initilize for \"root level\" refresh.\r\n\t\t// The data of the refreshed folder is not updated. This control's architecture only allows updating of children.\r\n\t\t// Folder renames should probably be handled directly on the node.\r\n\t\trefreshFolder: function refreshFolder($el) {\r\n\t\t\tvar $treeFolder = $el.closest('.tree-branch');\r\n\t\t\tvar $treeFolderChildren = $treeFolder.find('.tree-branch-children');\r\n\t\t\t$treeFolderChildren.eq(0).empty();\r\n\r\n\t\t\tif ($treeFolder.hasClass('tree-open')) {\r\n\t\t\t\tthis.populate($treeFolderChildren, false);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.populate($treeFolderChildren, true);\r\n\t\t\t}\r\n\r\n\t\t\tthis.$element.trigger('refreshedFolder.fu.tree', $treeFolder.data());\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// ALIASES\r\n\r\n\t//alias for collapse for consistency. \"Collapse\" is an ambiguous term (collapse what? All? One specific branch?)\r\n\tTree.prototype.closeAll = Tree.prototype.collapse;\r\n\t//alias for backwards compatibility because there's no reason not to.\r\n\tTree.prototype.openFolder = Tree.prototype.discloseFolder;\r\n\t//For library consistency\r\n\tTree.prototype.getValue = Tree.prototype.selectedItems;\r\n\r\n\t// PRIVATE FUNCTIONS\r\n\r\n\tfunction styleNodeSelected (self, $element, $icon) {//ACE\r\n\t\t$element.addClass('tree-selected');\r\n\t\t/**\r\n\t\tif ( $element.data('type') === 'item' && $icon.hasClass('fueluxicon-bullet') ) {\r\n\t\t\t$icon.removeClass('fueluxicon-bullet').addClass('glyphicon-ok'); // make checkmark\r\n\t\t}\r\n\t\t*/\r\n\t\t//ACE\r\n\t\tif ( $element.data('type') === 'item' && $icon.hasClass(self.options['unselected-icon']) ) {//ACE\r\n\t\t\t$icon.removeClass(self.options['unselected-icon']).addClass(self.options['selected-icon']); //ACE\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tfunction styleNodeDeselected (self, $element, $icon) {//ACE\r\n\t\t$element.removeClass('tree-selected');\r\n\t\t/**\r\n\t\tif ( $element.data('type') === 'item' && $icon.hasClass('glyphicon-ok') ) {\r\n\t\t\t$icon.removeClass('glyphicon-ok').addClass('fueluxicon-bullet'); // make bullet\r\n\t\t}\r\n\t\t*/\r\n\t\t//ACE\r\n\t\tif ( $element.data('type') === 'item' && $icon.hasClass(self.options['selected-icon']) ) {\r\n\t\t\t$icon.removeClass(self.options['selected-icon']).addClass(self.options['unselected-icon']); // make bullet\r\n\t\t}\r\n\t}\r\n\r\n\tfunction multiSelectSyncNodes (self, clicked, selected) {\r\n\t\t// search for currently selected and add to selected data list if needed\r\n\t\t$.each(selected.$elements, function (index, element) {\r\n\t\t\tvar $element = $(element);\r\n\t\t\tif ($element[0] !== clicked.$element[0]) {\r\n\t\t\t\tselected.dataForEvent.push( $($element).data() );\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (clicked.$element.hasClass('tree-selected')) {\r\n\t\t\tstyleNodeDeselected (self, clicked.$element, clicked.$icon);//ACE\r\n\t\t\t// set event data\r\n\t\t\tselected.eventType = 'deselected';\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstyleNodeSelected(self, clicked.$element, clicked.$icon);//ACE\r\n\t\t\t// set event data\r\n\t\t\tselected.eventType = 'selected';\r\n\t\t\tselected.dataForEvent.push(clicked.elementData);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction singleSelectSyncNodes(self, clicked, selected) {\r\n\t\t// element is not currently selected\r\n\t\tif (selected.$elements[0] !== clicked.$element[0]) {\r\n\t\t\tvar clearedElements = self.deselectAll(self.$element);\r\n\t\t\tstyleNodeSelected(self, clicked.$element, clicked.$icon);//ACE\r\n\t\t\t// set event data\r\n\t\t\tselected.eventType = 'selected';\r\n\t\t\tselected.dataForEvent = [clicked.elementData];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstyleNodeDeselected(self, clicked.$element, clicked.$icon);//ACE\r\n\t\t\t// set event data\r\n\t\t\tselected.eventType = 'deselected';\r\n\t\t\tselected.dataForEvent = [];\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// TREE PLUGIN DEFINITION\r\n\r\n\t$.fn.tree = function tree(option) {\r\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\r\n\t\tvar methodReturn;\r\n\r\n\t\tvar $set = this.each(function () {\r\n\t\t\tvar $this = $(this);\r\n\t\t\tvar data = $this.data('fu.tree');\r\n\t\t\tvar options = typeof option === 'object' && option;\r\n\r\n\t\t\tif (!data) {\r\n\t\t\t\t$this.data('fu.tree', (data = new Tree(this, options)));\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof option === 'string') {\r\n\t\t\t\tmethodReturn = data[option].apply(data, args);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (methodReturn === undefined) ? $set : methodReturn;\r\n\t};\r\n\r\n\t$.fn.tree.defaults = {\r\n\t\tdataSource: function dataSource(options, callback) {},\r\n\t\tmultiSelect: false,\r\n\t\tcacheItems: true,\r\n\t\tfolderSelect: true,\r\n\t\titemSelect: true,\r\n\t\t/*\r\n\t\t* How many times `discloseAll` should be called before a stopping and firing\r\n\t\t* an `exceededDisclosuresLimit` event. You can force it to continue by\r\n\t\t* listening for this event, setting `ignore-disclosures-limit` to `true` and\r\n\t\t* starting `discloseAll` back up again. This lets you make more decisions\r\n\t\t* about if/when/how/why/how many times `discloseAll` will be started back\r\n\t\t* up after it exceeds the limit.\r\n\t\t*\r\n\t\t*    $tree.one('exceededDisclosuresLimit.fu.tree', function () {\r\n\t\t*        $tree.data('ignore-disclosures-limit', true);\r\n\t\t*        $tree.tree('discloseAll');\r\n\t\t*    });\r\n\t\t*\r\n\t\t* `disclusuresUpperLimit` defaults to `0`, so by default this trigger\r\n\t\t* will never fire. The true hard the upper limit is the browser's\r\n\t\t* ability to load new items (i.e. it will keep loading until the browser\r\n\t\t* falls over and dies). On the Fuel UX `index.html` page, the point at\r\n\t\t* which the page became super slow (enough to seem almost unresponsive)\r\n\t\t* was `4`, meaning 256 folders had been opened, and 1024 were attempting to open.\r\n\t\t*/\r\n\t\tdisclosuresUpperLimit: 0\r\n\t};\r\n\r\n\t$.fn.tree.Constructor = Tree;\r\n\r\n\t$.fn.tree.noConflict = function () {\r\n\t\t$.fn.tree = old;\r\n\t\treturn this;\r\n\t};\r\n\r\n\r\n\t// NO DATA-API DUE TO NEED OF DATA-SOURCE\r\n\r\n\t// -- BEGIN UMD WRAPPER AFTERWORD --\r\n}));\r\n// -- END UMD WRAPPER AFTERWORD --\r\n"],"sourceRoot":"/source/"}